source("mmhc.R")
threeNode <- TwoNodes(5000)
x <- MMHC(x)
x <- MMHC(threeNode)
plot(x)
x <- MMHC(threeNode)
plot(x)
y <- MMPC(data.matrix(threeNode))
y
plot(y)
source("mmhc.R")
TestScore(data.matrix(threeNode), y)
source("mmhc.R")
x <- MMHC(threeNode)
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
x <- MMHC(threeNode)
plot(x)
y
head(threeNode)
y[1,2] <- 0
y[3,1] <- 0
y
y[3,2] <- 0
y
TestScore(data.matrix(threeNode), y)
y[1,3]<-0
y[3,1]<-1
TestScore(data.matrix(threeNode), y)
y[2,1] <- 0
y[1,2] <- 1
TestScore(data.matrix(threeNode), y)
y[1,3]<-1
y[3,1]<-0
TestScore(data.matrix(threeNode), y)
y
y <- matrix(0,3,3)
y[1,3] <- 1
TestScore(data.matrix(threeNode), y)
y[1,3] <- 0
y[3,1] <- 1
TestScore(data.matrix(threeNode), y)
y
getScore(data.matrix(threeNode), y, 1)
getScore(data.matrix(threeNode), y, 2)
getScore(data.matrix(threeNode), y, 3)
gamma(1)
tmpMat <- data.matrix(threeNode)
length(which(tmpMat[,1] == 1))
length(which(tmpMat[,1] == 2))
lgamma(1)
lgamma(5001)
lgamma(1635+0.5)-lgamma(0.5)+lgamma(3365+0.5)-lgamma(0.5)
-37591.14+34426.49
y[3,1] <- 0
y[1,3] <- 1
getScore(data.matrix(threeNode), y, 2)
getScore(data.matrix(threeNode), y, 1)
getScore(data.matrix(threeNode), y, 3)
length(which(tmpMat[,1] == 1))
length(which(tmpMat[,1] == 1 && tmpMat[,3] == 1))
length(which(tmpMat[,1] == 1 && tmpMat[,3] == 2))
length(which(tmpMat[,1] == 1 && tmpMat[,3] == 1))
q <- which(tmpMat[,1] == 1)
w <- which(tmpMat[,3] == 1)
length(q)
length(w)
length(which(q==w))
q==w
length(which(q==w))
q <- which(tmpMat[,1] == 2)
w <- which(tmpMat[,3] == 1)
length(which(q==w))
q <- which(tmpMat[,1] == 1)
w <- which(tmpMat[,3] == 2)
length(which(q==w))
q <- which(tmpMat[,1] == 2)
length(which(q==w))
lgamma(0.5)-lgamma(5+0.5)
lgamma(0.5)-lgamma(1+0.5)
-3.385449+lgamma(4+0.25)-lgamma(0.25)+lgamma(1.25)-lgamma(0.25)
source("mmhc.R")
getScore(data.matrix(threeNode), y, 1)
y[3,1] <- 1
y[1,3] <- 0
getScore(data.matrix(threeNode), y, 1)
source("mmhc.R")
getScore(data.matrix(threeNode), y, 1)
source("mmhc.R")
benchmark(MMHC(threeNode), replications=1)
source("mmhc.R")
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
x <- MMHC(threeNode)
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
source("mmhc.R")
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
source("mmhc.R")
x <- MMHC(threeNode)
plot(x)
x <- MMHC(threeNode)
x <- MMHC(threeNode)
x <- MMHC(threeNode)
x <- MMHC(threeNode)
x <- MMHC(threeNode)
plot(x)
t <- benchmark(unique(tmpMat), replications=10)
t
t[1]
t[3]
t <- benchmark(unique(tmpMat), replications=10, columns = c("elapsed"))
t[1]
source("mmhc.R")
myList <- PlotRuntime(1)
source("mmhc.R")
myList <- PlotRuntime(1)
source("mmhc.R")
myList <- PlotRuntime(1)
source("mmhc.R")
myList <- PlotRuntime(1)
source("mmhc.R")
myList <- PlotRuntime(1)
myList
source("mmhc.R")
myList <- PlotRuntime(1)
myList
source("mmhc.R")
myList <- PlotRuntime(1)
myList
myList$relativ[1]
myList$relativ[2]
plot(myList$size, myList$timeMine)
plot(myList$size, myList$timeMine, type="l")
source("mmhc.R")
myList <- PlotRuntime(1)
source("mmhc.R")
PlotSeperate(myList)
plot(myList$size, myList$timeMine, col="red", type="l")
lines(myList$size, myList$timeBN, col="blue")
myList
plot(myList$size, myList$timeBN, col="red", type="l")
df <- Example(5000, char = FALSE)
mat <- data.matrix(df)
benchmark(MMPC(mat), mmpc(df), replications=1)
df <- Example(1000, char = FALSE)
mat <- data.matrix(df)
benchmark(MMPC(mat), mmpc(df), replications=1)
PlotRuntime(1)
bench <- PlotRuntime(1)
PlotSeperate(bench)
source("mmhc.R")
PlotSeperate(bench)
source("mmhc.R")
PlotSeperate(bench)
vec <- 1:100
benchmark(Which(vec), which(vec), replications=100)
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1, as.integer(1))
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], 5, 2, 1, 1)
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1, as.integer(1))
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
y <- matrix(0, 5, 5)
getScore(MyExample, y, 1)
source("mmhc.R")
getScore(MyExample, y, 1)
getScore(MyExample, y, 1)
source("mmhc.R")
getScore(MyExample, y, 1)
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
MyExample[1:10,1]
source("mmhc.R")
source("mmhc.R")
ScoreEmptyGraph(MyExample[,1], as.integer(5), as.integer(2), 1)
Exp <- MyExample
ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1)
Exp <- MyExample
source("mmhc.R")
ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1)
getScore(Exp, y, 1)
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), replications=1)
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), replications=100)
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), replications=1000)
source("mmhc.R")
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), replications=1000)
source("mmhc.R")
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), replications=1000)
benchmark(getScore(Exp, y, 1), ScoreEmptyGraph(Exp[,1], as.integer(5), as.integer(2), 1), columns=c("test", "elapsed", "relative") ,replications=1000)
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
y
y[1,4] <- 1
getScore(Exp, y, 1)
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), 1)
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
source("mmhc.R")
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
source("mmhc.R")
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
source("mmhc.R")
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
source("mmhc.R")
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
source("mmhc.R")
getScore(Exp, y, 1)
source("mmhc.R")
ScoreNodeWithOneParent(Exp[,1], Exp[,4], as.integer(5), as.integer(2), as.integer(3), 1)
Unique(Exp)
Unique(data.matrix(Exp))
benchmark(Unique(data.matrix(Exp)), unique(data.matrix(Exp)), replications=10)
benchmark(Unique(data.matrix(Exp)), unique(data.matrix(Exp)), replications=100)
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
source("mmhc.R")
Unique(data.matrix(Exp))
mt <- data.matrix(MyExample)[1:100,]
mt
Unique(mt)
source("mmhc.R")
Un(mt)
source("mmhc.R")
Unique(mt)
source("mmhc.R")
Unique(mt)
