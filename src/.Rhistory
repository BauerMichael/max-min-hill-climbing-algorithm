dev.off()
dev.on()
dev()
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(2)
head(learning.test)
Test(2)
source("newCode.R")
source("newCode.R")
Test(2)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test()
Test(2)
source("newCode.R")
Test(1)
Test(1)
Test(2)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(2)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
options(warn=1)
Test(1)
Mat <- Matrixy[1:10,]
Mat
Mat <- Mat[,3:5]
Mat
which(Mat == c(1,1,2))
source("newCode.R")
Test(1)
Test(1)
Test(1)
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
Test(1)
a <- 1:3
b <- 1:3
identical(a,b)
a <- c(2,1,2)
b <- unique(Matrixy[,3:5])
b
identical(a, b[8,])
a
b[8,]
identical(as.numeric(a), as.numeric(b[8,]))
identical(a, as.numeric(b[8,]))
identical(as.integer(a), b[8,])
class(a)
class(b[8,])
identical(a, b[8,])
as.vector(b[8,])
identical(a, as.vector(b[8,]))
source("newCode.R")
nuScore(Matrixy, MMPC(Matrixy), 4)
source("newCode.R")
Test(1)
dim(a)
a
dim(a)
dim(Matrixy)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
getW(Matrixy, NULL)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
head(tmp)
Matrixy[1:10,]
head(Frame)
write(Matrixy)
write(Matrixy)
write(t(Matrixy))
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
testMat <- matrix(0,5,5)
testMat[1,4] <- 1
testMat[2,4] <- 1
testMat[2,3] <- 1
testMat[4,5] <- 1
testMat
Scoring(Matrixy, testMat)
gamma(1)
gamma(0)
gamma(-1)
lgamma(1)
lgamma(0)
source("newCode.R")
Scoring(Matrixy, testMat)
p<-Scoring(Matrixy, testMat)
plot(p)
Test(1)
Scoring(Matrixy, testMat)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
x
which(x[,4] == 1)
which(x[,4] == 1)[!5]
which(x[,4] == 1)[-5]
which(x[,4] == 1)[!(which(temp <- temp[!(which(temp == row))]]
temp <- which(x[,4] == 1)
temp
row <- 5
temp <- temp[!(which(temp == row))]
temp
temp <- which(x[,4] == 1)
temp
temp <- temp[!temp == row]
temp
temp <- which(x[,4] == 1)[!(temp == row)]
temp
temp <- which(x[,4] == 1)[!temp == row]
temp
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
Test(1)
Test(1)
source("newCode.R")
Test(1)
source("newCode.R")
Test(1)
x <- MMPC(Matrix)
x <- MMPC(Matrixy)
x
y <- matrix(0,5,5)
y[1,4] <- 1
Scoring(Matrixy, y, 1)
nuScore(Matrixy, y, 1)
y
y[1,4] <- 0
y[4,1] <- 0
y[4,1] <- 1
nuScore(Matrixy, y, 1)
y[4,1] <- 0
y[1,4] <- 1
y[2,3] <- 1
nuScore(Matrixy, y, 1)
y[2,3] <-0
y[3,2] <- 1
nuScore(Matrixy, y, 1)
y
y[2,3] <- 1
y[3,2] <- 0
y
y[2,4] <- 1
nuScore(Matrixy, y, 1)
y[2,4] <- 0
y[4,2] <- 1
nuScore(Matrixy, y, 1)
y
y[4,2] <- 0
y[2,4] <- 1
y
y[4,5] <- 1
nuScore(Matrixy, y, 1)
nuScore(Matrixy, y, 4)
y[5,4] <- 1
y[4,5] <- 0
nuScore(Matrixy, y, 5)
yy
y
y <- matrix(0,5,5)
Scoring(Matrixy, y)
source("newCode.R")
source("newCode.R")
dofunc(Matrixy, y)
y
y[1,4] <- 1
dofunc(Matrixy, y)
y[1,4] <- 0
y[4,1] <- 1
dofunc(Matrixy, y)
y
y <- matrix(0,5,5)
y[2,3] <- 1
dofunc(Matrixy, y)
y[2,3] <- 0
y[3,2] <- 1
dofunc(Matrixy, y)
source("newCode.R")
y <- matrix(0,5,5)
dofunc(Matrixy, y)
y[1,4] <- 1
dofunc(Matrixy, y)
y[1,4] <- 0
y[4,1] < 1
y[4,1] <- 1
y
dofunc(Matrixy, y)
source("newCode.R")
dofunc(Matrixy, y)
y[4,1] <- 0
y[1,4] <- 1
dofunc(Matrixy, y)
source("newCode.R")
dofunc(Matrixy, y)
y
y[1,4] <- 0
y[4,1] <- 1
dofunc(Matrixy, y)
source("newCode.R")
Test(1
)
source("newCode.R")
)
Test(1)
quit()
source("newCode.R")
mmhc(tmp)
x<-mmhc(tmp)
x
plot(x)
?mmhc
source("newCode.R")
ToCrossOut(1:10, 1:5)
class(1:10)
source("newCode.R")
source("newCode.R")
source("newCode.R")
ToCrossOutR(1:10, 1)
ToCrossOutC(1:10, 1)
class(1)
ToCrossOutC(1:10, as.integer(1))
ToCrossOutR(1:10, 1:5)
ToCrossOutC(1:10, 1:5)
benchmark(ToCrossOutR(1:1000, 41:59), ToCrossOutC(1:1000, 41:59), replications=100, columns=c("test", "elapsed", "relative")
)
benchmark(ToCrossOutR(1:1000, 41:59), ToCrossOutC(1:1000, 41:59), replications=100, columns=c("test", "elapsed", "relative"))
source("newCode.R")
source("newCode.R")
ToCrossOutC(1:10, 2)
ToCrossOutC(1:10, 2:3)
source("newCode.R")
ToCrossOutC(1:10, 2:3)
ToCrossOutC(1:6, 2:3)
source("newCode.R")
ToCrossOutC(1:6, 2:3)
ToCrossOutC(1:6, 2:3)
ToCrossOutC(1:10, 2:3)
benchmark(ToCrossOutR(1:1000, 41:59), ToCrossOutC(1:1000, 41:59), replications=100, columns=c("test", "elapsed", "relative"))
benchmark(MaxMinHeuristic(1, 2, Matrixy, 3:5), replications=100)
source("newCode.R")
MMPC(Matrixy)
CT
benchmark(MaxMinHeuristic(1, 2, Matrixy, 3:5), replications=40)
tmp
class(tmp)
benchmark(mmpc(tmp), replications=1)
benchmark(MMPC(Matrixy), replications=1)
benchmark(MaxMinHeuristic(1, 2, Matrixy, 3:5), replications=40)
source("newCode.R")
MMHC(tmp)
source("newCode.R")
source("newCode.R")
MMHC(tmp)
x <- MMHC(tmp)
plot(x)
benchmark(MMHC(tmp), mmhc(tmp), replications=1)
source("newCode.R")
getR(1:10)
getR(Matrixy[,1])
LengthOfUnique(Matrixy[,1])
benchmark(getR(Matrixy[,1], LengthOfUnique(Matrixy[,1]), replications=100, columns=("test", "elapsed", "relative"))
benchmark(getR(Matrixy[,1]), LengthOfUnique(Matrixy[,1]), replications=100, columns=("test", "elapsed", "relative"))
benchmark(getR(Matrixy[,1]), LengthOfUnique(Matrixy[,1]))
benchmark(getR(Matrixy[,1]), LengthOfUnique(Matrixy[,1]), replications=100)
source("newCode.R")
benchmark(getR(Matrixy[,1]), LengthOfUnique(Matrixy[,1]), replications=100)
benchmark(getR(Matrixy[,1]), LengthOfUnique(Matrixy[,1]), replications=100)
mat <- Matrixy[1:100,]
unique(mat)
Unique(mat)
benchmark(unique(mat), Unique(mat), replications=100)
x<-Unique(mat)
dim(x)
x<-Unique(mat[,c(1,2)])
dim(x)
x<-Unique(Matrixy[,c(1,2)])
dim(x)
x
source("newCode.R")
B1(mat)
B2(mat)
source("newCode.R")
B1(mat)
B2(mat)
x <- Unique(mat[,c(1,2,3)])
x
x <- Unique(Matrixy[,c(1,2,3)])
x
source("newCode.R")
benchmark(B1(Matrixy), B2(Matrixy), replications=100)
p <- NULL
out <- 1
for (i in p) {
out <- out * i
}
out
length(which(mat[,3] == 2))
length(which(mat[,3] == 1))
source("newCode.R")
source("newCode.R")
source("newCode.R")
matchValue(mat[,3], 2)
matchValue(mat[,3], as.integer(2))
benchmark(length(which(mat[,3] == 2)), matchValue(mat[,3], as.integer(2)), replications=100)
benchmark(length(which(mat[,3] == 2)), matchValue(mat[,3], as.integer(2)), replications=1000)
benchmark(length(which(mat[,3] == 2)), matchValue(mat[,3], as.integer(2)), replications=10000)
benchmark(length(which(Matrixy[,3] == 2)), matchValue(Matrixy[,3], as.integer(2)), replications=10000)
source("newCode.R")
MMHC(tmp)
x<-MMHC(tmp)
plot(x)
source("newCode.R")
x<-MMHC(tmp)
plot(x)
warnings()
source("newCode.R")
x<-MMHC(tmp)
plot(x)
source("newCode.R")
x<-MMHC(tmp)
plot(x)
benchmark(MMHC(tmp), mmhc(tmp), replications=1)
benchmark(MMHC(tmp), mmhc(tmp), replications=1)
benchmark(MMHC(tmp), mmhc(tmp), replications=1)
source("newCode.R")
benchmark(MMHC(tmp), mmhc(tmp), replications=1)
mat
getR(mat[,1],2)
quit()
