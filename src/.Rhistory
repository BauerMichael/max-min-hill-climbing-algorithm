source("code.R")
source("code.R")
mat <- matrix(2, 1000, 5)
m <- Calc(mat)
dim(m)
m[1:10,]
benchmark(Calc(mat),replications=1)
benchmark(Calc(mat),replications=10)
benchmark(Calc(mat),replications=100)
benchmark(Calc(mat),replications=1)
mat <- matrix(10, 10000, 5)
benchmark(Calc(mat),replications=1)
source("code.R")
Calc(mat)
benchmark(Calc(mat),replications=1)
benchmark(Calc(mat),replications=10)
Calc(mat)
source("code.R")
Calc(mat)
source("code.R")
Calc(mat)
benchmark(Calc(mat),replications=10)
source("code.R")
benchmark(Calc(mat),replications=10)
benchmark(Calc(mat^T),replications=10)
source("code.R")
benchmark(Calc(mat^T),replications=10)
benchmark(mat^T,replications=10)
benchmark(mat^T,replications=1)
benchmark(mat^T,replications=100)
source("code.R")
ls()
Matrix
Stats(Matrix)
ls8)
ls()
Df
source("code.R")
Stats(Matrix, card)
unique(Matrix[,1])
all(Matrix[,1] == 1)
which(Matrix[,1] == 1)
length(which(Matrix[,1] == 1))
length(which(Matrix[,1] == 0))
source("code.R")
Stats(Matrix, card)
benchmark(Stats(Matrix, card), replications=1)
benchmark(Stats(Matrix, card), replications=100)
benchmark(Stats(Matrix, card), replications=1000)
(1:10==1:10)
(1:10==1:11)
(1:10==1:10)
duplicated(1:10==1:10)
identical(1:10==1:10)
identical(1:10,1:10)
identical(1:10,1:11)
identical(1:10,1:10)
dim(mat)
source("code.R")
cnt
source("code.R")
cnt
source("code.R")
cnt
source("code.R")
cnt
Stats(Matrix, card)
Stats(Matrix[,c(1,2,3)], card)
source("code.R")
cnt
Stats(Matrix[,c(1,2,3)], card)
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
.Call(main)
.Call(main.so)
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
?.Call
?dyn.load
is.loaded(main)
is.loaded("main")
dyn.load("main")
dyn.load("main.so")
dyn.load("MyTest")
dyn.load("main.so")
.Call("main.so")
.Call("MyTest")
.Call("MyTest",)
.Call("MyTest",1)
source("code.R")
source("code.R")
Func
Func()
Func()
source("code.R")
Func()
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
dyn.load("main.so")
.Call("MyTest")
.C("MyTest")
dyn.load("main.so")
.C("MyTest")
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
dyn.load("main.so")
.Call("MyTest")
.Call("MyTest")
source("code.R")
source("code.R")
source("code.R")
x <- 1:1000000
y <- 1:1000000
y <- 2*y
z <- Norm(x,y)
z
source("code.R")
NoRm(x,y)
x <- 1.0*x
NoRm(x,y)
benchmark(Norm(x,y), NoRm(x,y), replications=1000, columns=c("test", "elapsed", "seconds"))
benchmark(Norm(x,y), NoRm(x,y), replications=100, columns=c("test", "elapsed", "seconds"))
benchmark(Norm(x,y), NoRm(x,y), replications=100, column=c("test", "elapsed", "seconds"))
benchmark(Norm(x,y), NoRm(x,y), replications=100, columns=c("test", "elapsed", "relative"))
benchmark(Norm(x,y), NoRm(x,y), replications=1000, columns=c("test", "elapsed", "relative"))
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
mat <- matrix(sample(1:10, 100, replace=TRUE))
mat
mat <- matrix(sample(1:10, 100, replace=TRUE), 10, 10)
mat
NoRm(x, y, mat, 10, 10)
mat <- as.numeric(mat)
mat
mat <- matrix(sample(1:10, 100, replace=TRUE), 10, 10)
source("code.R")
source("code.R")
NoRm(x, y, mat, 10, 10)
source("code.R")
NoRm(x, y, mat, 10, 10)
class(10)
as.integer(10)
class(as.integer(10))
zehn <- as.integer(10)
NoRm(x, y, mat, zehn, zehn)
mat
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
A <- matrix(sample(1:9, 1000000, replace=TRUE), 1000, 1000)
x <- sample(1:3, 1000, replace=TRUE)
y <- sample(2:4, 1000, replace=TRUE)
dim(A)
i <- 1000
i <- as.integer(1000)
j <- as.integer(1000)
z <- NoRm(x, y, A, i, j)
class(x)
source("code.R")
z <- NoRm(x, y, A, i, j)
source("code.R")
z <- NoRm(x, y, A, i, j)
source("code.R")
Norm(x,y,A)
source("code.R")
z <- NoRm(x, y, A, i, j)
source("code.R")
z <- NoRm(x, y, A, i, j)
z
Norm(x,y,A)
z
source("code.R")
z <- NoRm(x, y, A, i, j)
z
Norm(x,y,A)
NoRm(x,y,A,i,j)
source("code.R")
Norm(x,y,A)
NoRm(x,y,A,i,j)
NoRm(x,y,A,i,j)
NoRm(x,y,A,i,j)
x
source("code.R")
NoRm(x,y,A,i,j)
Norm(x,y,A)
source("code.R")
Norm(x,y,A)
source("code.R")
Norm(x,y,A)
source("code.R")
Norm(x,y,A)
Norm(x,y,A)
Norm(x,y,A)
NoRm(x,y,A,i,j)
source("code.R")
NoRm(x,y,A,i,j)
Norm(x,y,A)
source("code.R")
NoRm(x,y,A,i,j)
Norm(x,y,A)
source("code.R")
Norm(x,y,A)
NoRm(x,y,A,i,j)
source("code.R")
NoRm(x,y,A,i,j)
i
i <- as.integer(1000)
NoRm(x,y,A,i,j)
Norm(x,y,A)
source("code.R")
Norm(x,y,A)
NoRm(x,y,A,i,j)
i
j
i <- as.integer(1000)
NoRm(x,y,A,i,j)
benchmark(Norm(x,y), NoRm(x,y), replications=100, columns=c("test", "elapsed", "relative"))
benchmark(Norm(x,y,A), NoRm(x,y,A,i,j), replications=100, columns=c("test", "elapsed", "relative"))
source("code.R")
source("code.R")
i
j
i <- j
i
benchmark(Norm(x,y,A), NoRm(x,y,A,i,j), replications=100, columns=c("test", "elapsed", "relative"))
source("code.R")
source("code.R")
source("code.R")
NoRm(x,y,A,i,j)
Norm(x,y,A)
i <- j
NoRm(x,y,A,i,j)
benchmark(Norm(x,y,A), NoRm(x,y,A,i,j), replications=100, columns=c("test", "elapsed", "relative"))
i
source("code.R")
i
i <- j
NoRm(x,y,A,i,j)
Norm(x,y,A)
benchmark(Norm(x,y,A), NoRm(x,y,A,i,j), replications=100, columns=c("test", "elapsed", "relative"))
source("code.R")
source("code.R")
source("code.R")
benchmark(Print(A), replications=1000)
source("code.R")
benchmark(Print(A), replications=1000)
benchmark(Print(A), replications=100)
benchmark(Print(A), replications=10)
source("code.R")
benchmark(Print(A), replications=10)
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
Print(A)
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
class(A)
class(A[1,1])
B <- as.numeric(A)
B[1:10,1:10]
B
Print(A)
source("code.R")
Print()
source("code.R")
Print()
source("code.R")
source("code.R")
source("code.R")
Print()
source("code.R")
Print(A)
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
my
my(1)
source("code.R")
my
my(1)
my(1)
source("code.R")
my
my(1=)
my(1)
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
quit()
